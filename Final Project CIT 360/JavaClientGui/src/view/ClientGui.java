package view;

import controller.ApplicationController;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONObject;


/**
 *
 * Client VIEW Class
 */
public class ClientGui extends javax.swing.JFrame {

    /**
     * Creates new form ClientGui
     */
    public ClientGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        searchButton1 = new javax.swing.JButton();
        zipCodeFieldText = new javax.swing.JTextField();
        zipCodeLabel = new javax.swing.JLabel();
        searchOptionDropDown = new javax.swing.JComboBox<>();
        optionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jsonResponseArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultResponseArea = new javax.swing.JTextArea();
        jsonLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        addressFieldText = new javax.swing.JTextField();
        cityFieldText = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        stateFieldText = new javax.swing.JTextField();
        zipSearchedLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        searchButton1.setText("Search");
        searchButton1.setToolTipText("Push search to test the data entered");
        searchButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButton1MouseClicked(evt);
            }
        });

        zipCodeFieldText.setToolTipText("Type a valid zipcode");
        zipCodeFieldText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zipCodeFieldTextMouseClicked(evt);
            }
        });

        zipCodeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        zipCodeLabel.setText("Zip Code:");

        searchOptionDropDown.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchOptionDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by ZipCode", "Search by Address", "Search Zip List" }));
        searchOptionDropDown.setToolTipText("Select the option desired to test the project");
        searchOptionDropDown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchOptionDropDownItemStateChanged(evt);
            }
        });

        optionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        optionLabel.setText("Options:");

        jsonResponseArea.setColumns(20);
        jsonResponseArea.setRows(5);
        jScrollPane1.setViewportView(jsonResponseArea);

        resultResponseArea.setColumns(20);
        resultResponseArea.setRows(5);
        jScrollPane2.setViewportView(resultResponseArea);

        jsonLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jsonLabel.setText("Json Response");

        resultLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resultLabel.setText("Search Result");

        titleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(51, 51, 255));
        titleLabel.setText("Client Server Validator");

        addressLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addressLabel.setText("Address:");
        addressLabel.setToolTipText("");

        cityLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cityLabel.setText("City:");
        cityLabel.setToolTipText("");

        addressFieldText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addressFieldText.setToolTipText("Type your best guess for an address");

        cityFieldText.setToolTipText("Enter a City");

        stateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stateLabel.setText("State:");
        stateLabel.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jsonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultLabel)
                .addGap(150, 150, 150))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(optionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchOptionDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(zipCodeLabel)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchButton1)
                                    .addComponent(zipCodeFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zipSearchedLabel))))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel)
                            .addComponent(cityLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchOptionDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressLabel)
                    .addComponent(addressFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipCodeFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zipCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel)
                    .addComponent(cityFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateLabel)
                    .addComponent(stateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(zipSearchedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsonLabel)
                    .addComponent(resultLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zipCodeFieldTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zipCodeFieldTextMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_zipCodeFieldTextMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.turnOffResponseWindows();        
        String item = (String) searchOptionDropDown.getSelectedItem();
            if ("Search by ZipCode".equals(item)){
                 this.turnOffAddressFields();
            } else if ("Search by Address".equals(item)) {
                this.turnOnAddressFields();
            } else {
                this.turnOffAddressFields();
                this.turnOffResponseWindows();
                this.turnOnZipCodeListArea();
            }
        
    }//GEN-LAST:event_formWindowActivated

    private void turnOffResponseWindows(){
        jsonLabel.setVisible(false);
        resultLabel.setVisible(false);
        jsonResponseArea.setVisible(false);
        resultResponseArea.setVisible(false);
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
    }
    
     private void turnOnResponseWindows(){
        jsonLabel.setVisible(true);
        resultLabel.setVisible(true);
        jsonResponseArea.setVisible(true);
        resultResponseArea.setVisible(true);
        jScrollPane1.setVisible(true);
        jScrollPane2.setVisible(true);
    }
    
    private void turnOffAddressFields(){
        addressFieldText.setVisible(false);
        addressLabel.setVisible(false);
        cityFieldText.setVisible(false);
        cityLabel.setVisible(false);
        stateFieldText.setVisible(false);
        stateLabel.setVisible(false);
    }
    
    private void cleanFields(){
        addressFieldText.setText("");
        cityFieldText.setText("");
        stateFieldText.setText("");
        zipCodeFieldText.setText("");
        jsonResponseArea.setText("");
    }
        
    private void turnOnZipCodeListArea(){
        jsonLabel.setVisible(true);
        jsonResponseArea.setVisible(true);
        jScrollPane1.setVisible(true);
        zipCodeFieldText.setEnabled(false);
        zipCodeFieldText.setEditable(false);
    }
    
    private void turnOnAddressFields(){
         addressFieldText.setVisible(true);
        addressLabel.setVisible(true);
        cityFieldText.setVisible(true);
        cityLabel.setVisible(true);
        stateFieldText.setVisible(true);
        stateLabel.setVisible(true);
    }
    
    private void searchOptionDropDownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchOptionDropDownItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ){
            String item = (String) searchOptionDropDown.getSelectedItem();
            if ("Search by ZipCode".equals(item)){
                this.turnOffAddressFields();
                this.turnOffResponseWindows();
                this.turnOnZicodeTextArea();
                zipSearchedLabel.setText("");
            } else if ("Search by Address".equals(item)) {
              //this.turnOffZipCodeFields();
              this.turnOnAddressFields();
              this.turnOffResponseWindows();  
              this.turnOnZicodeTextArea();
              zipSearchedLabel.setText("");
            } else {
                jsonLabel.setText("Zip Code Search List");
                jsonLabel.setToolTipText("Enter a list of zipcodes - 1 per line");
                jsonResponseArea.setToolTipText("Enter a list of zipcodes - 1 per line");
                this.turnOnZipCodeListArea();
                this.turnOffAddressFields();
            }
            this.cleanFields();
        }
    }//GEN-LAST:event_searchOptionDropDownItemStateChanged

    private void turnOnZicodeTextArea(){
        zipCodeFieldText.setEnabled(true);
        zipCodeFieldText.setEditable(true);
        jsonLabel.setText("Json Result");
        jsonLabel.setToolTipText("");
        jsonResponseArea.setToolTipText("");
        zipSearchedLabel.setText("");
    }
    
    private boolean isFieldFiled(){
         String item = (String) searchOptionDropDown.getSelectedItem();
         boolean isFilled = false;
            if ("Search by ZipCode".equals(item)){
                String zipcode = zipCodeFieldText.getText();
                if (!zipcode.isEmpty() || !zipcode.isBlank()){
                    isFilled = zipcode.length() == 5;
                }
            } else if ("Search by Address".equals(item)){
                String address = addressFieldText.getText();
                String city = cityFieldText.getText();
                String state = stateFieldText.getText();
                String zipcode = zipCodeFieldText.getText();
                
                if ((!address.isBlank()|| !address.isEmpty()) && (!city.isBlank()||!city.isEmpty()) && 
                        (!state.isBlank()||!state.isEmpty()) && 
                        (!zipcode.isEmpty() || !zipcode.isBlank()) && zipcode.length() == 5){
                    isFilled = true;
                }
            } else {
                if (!jsonResponseArea.getText().isBlank() || !jsonResponseArea.getText().isEmpty()){
                     isFilled = true;
                }
            }
        return isFilled;
    }
    
    private HashMap<String, Object> getRequestHashMap(String type){
        HashMap<String, Object> requestData = new HashMap<>();
        if ("Search by ZipCode".equals(type)){
            String zipCode = zipCodeFieldText.getText();
            requestData.put("zipCode", zipCode);
        } else if ("Search by Address".equals(type)) {
            String zipCode = zipCodeFieldText.getText();
            String address = addressFieldText.getText();
            String city = cityFieldText.getText();
            String state = stateFieldText.getText();            
            requestData.put("zipCode", zipCode);
            requestData.put("address", address);
            requestData.put("city", city);
            requestData.put("state", state);
        } else {
            /**
             * Makes a collection of zipCodes
             */
            String zip = jsonResponseArea.getText();
            List<String> zipList = new ArrayList<String>(Arrays.asList(zip.split("\\r?\\n")));
            requestData.put("zipcodeList", zipList);
        }       
        return requestData;
    }
    
    
    /**
     * 
     * @param responseObject 
     */
    private void processResponseFromController(Object responseObject, String type) {
        JSONObject jSONObject = null;
        if (!(responseObject instanceof List<?>)){
            jSONObject = new JSONObject(responseObject.toString());
             //JSON area
            String jsonStr = responseObject.toString();
            jsonStr = jsonStr.replace("{", "{\n");
            jsonStr = jsonStr.replace("}", "}\n");
            jsonResponseArea.setText(jsonStr);
        }
        
        if ("Search by ZipCode".equals(type)){
            //Result Area
            String resultText = "City: " + jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getString("City") + "\n";
            resultText = resultText + "State: " + jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getString("State") + "\n";
            resultText = resultText + "ZipCode: " + jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getInt("Zip5") + "\n";
            resultResponseArea.setText(resultText);
        } else if ("Search by Address".equals(type)) {
            //Result Area
            String resultText = "Address: " + jSONObject.getJSONObject("ZipCodeLookupResponse").getJSONObject("Address").getString("Address2") + "\n";
            resultText = resultText +"City: " + jSONObject.getJSONObject("ZipCodeLookupResponse").getJSONObject("Address").getString("City") + "\n";
            resultText = resultText + "State: " + jSONObject.getJSONObject("ZipCodeLookupResponse").getJSONObject("Address").getString("State") + "\n";
            int zip5 = jSONObject.getJSONObject("ZipCodeLookupResponse").getJSONObject("Address").getInt("Zip5");
            resultText = resultText + "ZipCode: " + zip5 + "\n";
            int zip4 = jSONObject.getJSONObject("ZipCodeLookupResponse").getJSONObject("Address").getInt("Zip4");
            resultText = resultText + "ZipCode4: " + zip4 + "\n";
            resultText = resultText + "Complete Zip: " + zip5 + "-" + zip4;
            resultResponseArea.setText(resultText);
        } else {
            //TODO: response
           List<String> list = (List<String>) responseObject;
           String responseArea = "";
           String jsonArea = "";
           String zipCodeSearched = "";
            for (String jsonStr : list) {
                 jSONObject = new JSONObject(jsonStr);             
                 jsonStr = jsonStr.replace("{", "{\n");
                 jsonStr = jsonStr.replace("}", "}\n");
                jsonArea = jsonArea + jsonStr + "\n";
                int zipCode = jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getInt("Zip5");
                responseArea = responseArea + "City: " + jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getString("City") + "\n";
                responseArea = responseArea + "State: " + jSONObject.getJSONObject("CityStateLookupResponse").getJSONObject("ZipCode").getString("State") + "\n";
                responseArea = responseArea + "ZipCode: " +  zipCode + "\n\n";
                zipCodeSearched = zipCodeSearched + "  " + zipCode;
            }
            jsonResponseArea.setText(jsonArea);
            resultResponseArea.setText(responseArea);
            zipSearchedLabel.setText("Zip Code Searched: " + zipCodeSearched );
        }
        
        this.turnOnResponseWindows();
    }
      
    /**
     * This View calls the application controller passing the handler action 
     * and handler parameters for processing.
     * @param evt 
     */
    private void searchButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButton1MouseClicked
        if (this.isFieldFiled()){
            String type = (String) searchOptionDropDown.getSelectedItem();
            String command = "Search by ZipCode".equals(type)?"searchCityState":"Search by Address".equals(type)?"searchAddress":"searchList";
            try {
                Object responseObject = ApplicationController.getInstance().doCommand(command, this.getRequestHashMap(type));
                this.processResponseFromController(responseObject, type);
            } catch (Exception ex) {
                Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else {
            JOptionPane.showMessageDialog(null, "Please enter valid options for all fields", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_searchButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressFieldText;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField cityFieldText;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel jsonLabel;
    private javax.swing.JTextArea jsonResponseArea;
    private javax.swing.JLabel optionLabel;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JTextArea resultResponseArea;
    private javax.swing.JButton searchButton1;
    private javax.swing.JComboBox<String> searchOptionDropDown;
    private javax.swing.JTextField stateFieldText;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField zipCodeFieldText;
    private javax.swing.JLabel zipCodeLabel;
    private javax.swing.JLabel zipSearchedLabel;
    // End of variables declaration//GEN-END:variables
  
}
